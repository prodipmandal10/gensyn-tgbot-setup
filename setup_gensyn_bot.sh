#!/usr/bin/env python3

import asyncio
import subprocess
from telegram import Bot
import time
import re
from datetime import datetime

# ====== CONFIGURATION ======
BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHAT_ID = 'YOUR_TELEGRAM_CHAT_ID'
BOT_PROMO_NAME = 'GENSYN- CJE(1)'   # ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
TMUX_SESSION = 'GEN'               # tmux session ‡¶®‡¶æ‡¶Æ, ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßü ‡¶∏‡ßá‡¶ü‡¶æ‡¶ì ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
ALERT_INTERVAL = 600               # ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü = 600 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°
MAX_TRACK_LINES = 100              # ‡¶ï‡¶§ ‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá (prevent duplicate alerts ‡¶ï‡ßã‡¶®‡¶ì ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶≤‡¶ó ‡¶®‡¶ø‡ßü‡ßá)
# ============================

bot = Bot(token=BOT_TOKEN)
last_lines = []
last_alert_time = 0

def get_tmux_logs(session_name=TMUX_SESSION):
    """tmux ‡¶•‡ßá‡¶ï‡ßá session ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ pane ‡¶≤‡¶ó ‡¶ß‡¶∞‡¶¨‡ßá"""
    try:
        output = subprocess.check_output(['tmux', 'capture-pane', '-pt', session_name])
        return output.decode('utf-8', errors='ignore').strip().splitlines()
    except Exception as e:
        print(f"[ERROR] TMUX capture failed: {e}")
        return []

def clean_line(line: str) -> str:
    """‡¶≤‡¶ó‡ßá‡¶∞ ‡¶Ö‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Ö‡¶Ç‡¶∂ ‡¶ì ‡¶¨‡¶°‡¶º progress bar ‡¶ï‡¶Æ‡¶ø‡ßü‡ßá ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá"""
    # Long progress bar ‡¶ï‡¶Æ‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ì ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ö‡¶Ç‡¶∂
    line = re.sub(r"‚ñà+", "‚ñà‚Ä¶", line)
    # ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ü‡¶ó‡ßá ‡¶ì ‡¶™‡¶∞‡ßá spaces ‡¶ï‡ßá‡¶ü‡ßá ‡¶´‡ßá‡¶≤
    return line.strip()

async def send_message(text: str, parse_html: bool = False):
    try:
        if parse_html:
            await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")
        else:
            await bot.send_message(chat_id=CHAT_ID, text=text)
        print(f"Sent message at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
        print(f"[ERROR] Telegram send failed: {e}")

async def send_alert(lines):
    """‡¶∂‡ßá‡¶∑ ‡ßß‡ß¶ ‡¶≤‡¶æ‡¶á‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ HTML pre block ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá"""
    clean_logs = "\n".join([clean_line(l) for l in lines[-10:]])
    timestamp = datetime.now().strftime("%d-%m-%Y %H:%M")
    message = (
        f"<b>üö® GENSYN LOGS CHECK, [{timestamp}]</b>\n"
        f"<b>{BOT_PROMO_NAME}</b>\n\n"
        f"<pre>{clean_logs}</pre>"
    )
    await send_message(message, parse_html=True)

async def monitor_logs():
    global last_lines, last_alert_time
    while True:
        lines = get_tmux_logs()
        if not lines:
            await asyncio.sleep(3)
            continue

        # detect new lines to send events immediately
        new_lines = [line for line in lines if line not in last_lines]

        for line in new_lines:
            stripped = line.strip()
            if not stripped:
                continue

            # ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ / ÏïåÎ¶º ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá
            if "Map: 100%" in stripped:
                msg = f"{BOT_PROMO_NAME}\nüó∫Ô∏è {clean_line(stripped)}"
                await send_message(msg)
            elif stripped.startswith("Starting round:"):
                msg = f"{BOT_PROMO_NAME}\nüöÄ {clean_line(stripped)}"
                await send_message(msg)
            elif stripped.startswith("Joining round:"):
                msg = f"{BOT_PROMO_NAME}\nüîÑ {clean_line(stripped)}"
                await send_message(msg)
            elif "logging_utils.global_defs][ERROR]" in stripped:
                msg = f"{BOT_PROMO_NAME}\nüö® NODE CRASH DETECTED!\n{clean_line(stripped)}"
                await send_message(msg)

        # duplicate prevention
        last_lines = lines[-MAX_TRACK_LINES:]

        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ALERT_INTERVAL ‡¶™‡¶∞ alert ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá
        now = time.time()
        if now - last_alert_time >= ALERT_INTERVAL:
            await send_alert(lines)
            last_alert_time = now

        await asyncio.sleep(3)

if __name__ == "__main__":
    asyncio.run(monitor_logs())
